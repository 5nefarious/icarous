//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: GPSInfoDcps.h
//  Source: /home/mfeliu/Desktop/icarous/icarous-legacy/C++/include/DDS/topics/gen/GPSInfoDcps.idl
//  Generated: Mon Dec 18 16:02:26 2017
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _GPSINFODCPS_H_
#define _GPSINFODCPS_H_
#ifndef OPENSPLICE_ISOCXX_PSM
#define OPENSPLICE_ISOCXX_PSM
#endif

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "GPSInfo.h"
#include "dds_dcps.h"


namespace MAVLink
{

   class GPSInfoTypeSupportInterface;

   typedef GPSInfoTypeSupportInterface * GPSInfoTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < GPSInfoTypeSupportInterface> GPSInfoTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < GPSInfoTypeSupportInterface> GPSInfoTypeSupportInterface_out;


   class GPSInfoDataWriter;

   typedef GPSInfoDataWriter * GPSInfoDataWriter_ptr;
   typedef DDS_DCPSInterface_var < GPSInfoDataWriter> GPSInfoDataWriter_var;
   typedef DDS_DCPSInterface_out < GPSInfoDataWriter> GPSInfoDataWriter_out;


   class GPSInfoDataReader;

   typedef GPSInfoDataReader * GPSInfoDataReader_ptr;
   typedef DDS_DCPSInterface_var < GPSInfoDataReader> GPSInfoDataReader_var;
   typedef DDS_DCPSInterface_out < GPSInfoDataReader> GPSInfoDataReader_out;


   class GPSInfoDataReaderView;

   typedef GPSInfoDataReaderView * GPSInfoDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < GPSInfoDataReaderView> GPSInfoDataReaderView_var;
   typedef DDS_DCPSInterface_out < GPSInfoDataReaderView> GPSInfoDataReaderView_out;

   struct GPSInfoSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < GPSInfo, struct GPSInfoSeq_uniq_> GPSInfoSeq;
   typedef DDS_DCPSSequence_var < GPSInfoSeq> GPSInfoSeq_var;
   typedef DDS_DCPSSequence_out < GPSInfoSeq> GPSInfoSeq_out;
   class GPSInfoTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef GPSInfoTypeSupportInterface_ptr _ptr_type;
      typedef GPSInfoTypeSupportInterface_var _var_type;

      static GPSInfoTypeSupportInterface_ptr _duplicate (GPSInfoTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GPSInfoTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static GPSInfoTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GPSInfoTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      GPSInfoTypeSupportInterface_ptr _this () { return this; }


   protected:
      GPSInfoTypeSupportInterface () {};
      ~GPSInfoTypeSupportInterface () {};
   private:
      GPSInfoTypeSupportInterface (const GPSInfoTypeSupportInterface &);
      GPSInfoTypeSupportInterface & operator = (const GPSInfoTypeSupportInterface &);
   };

   class GPSInfoDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef GPSInfoDataWriter_ptr _ptr_type;
      typedef GPSInfoDataWriter_var _var_type;

      static GPSInfoDataWriter_ptr _duplicate (GPSInfoDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GPSInfoDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static GPSInfoDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GPSInfoDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      GPSInfoDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const GPSInfo& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const GPSInfo& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const GPSInfo& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const GPSInfo& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const GPSInfo& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const GPSInfo& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const GPSInfo& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const GPSInfo& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const GPSInfo& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const GPSInfo& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (GPSInfo& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const GPSInfo& instance_data) = 0;

   protected:
      GPSInfoDataWriter () {};
      ~GPSInfoDataWriter () {};
   private:
      GPSInfoDataWriter (const GPSInfoDataWriter &);
      GPSInfoDataWriter & operator = (const GPSInfoDataWriter &);
   };

   class GPSInfoDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef GPSInfoDataReader_ptr _ptr_type;
      typedef GPSInfoDataReader_var _var_type;

      static GPSInfoDataReader_ptr _duplicate (GPSInfoDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GPSInfoDataReader_ptr _narrow (DDS::Object_ptr obj);
      static GPSInfoDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GPSInfoDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      GPSInfoDataReader_ptr _this () { return this; }

      virtual DDS::Long read (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (GPSInfo& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (GPSInfo& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (GPSInfo& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const GPSInfo& instance) = 0;

   protected:
      GPSInfoDataReader () {};
      ~GPSInfoDataReader () {};
   private:
      GPSInfoDataReader (const GPSInfoDataReader &);
      GPSInfoDataReader & operator = (const GPSInfoDataReader &);
   };

   class GPSInfoDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef GPSInfoDataReaderView_ptr _ptr_type;
      typedef GPSInfoDataReaderView_var _var_type;

      static GPSInfoDataReaderView_ptr _duplicate (GPSInfoDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GPSInfoDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static GPSInfoDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GPSInfoDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      GPSInfoDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (GPSInfo& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (GPSInfo& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (GPSInfoSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (GPSInfo& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const GPSInfo& instance) = 0;

   protected:
      GPSInfoDataReaderView () {};
      ~GPSInfoDataReaderView () {};
   private:
      GPSInfoDataReaderView (const GPSInfoDataReaderView &);
      GPSInfoDataReaderView & operator = (const GPSInfoDataReaderView &);
   };

}




#endif 
