//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: GPSInfoDcps.cpp
//  Source: /home/mfeliu/Desktop/icarous/icarous-legacy/C++/include/DDS/topics/gen/GPSInfoDcps.idl
//  Generated: Mon Dec 18 16:50:36 2017
//  OpenSplice 6.7.170912OSS
//  
//******************************************************************

#include "GPSInfoDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < MAVLink::GPSInfo, struct GPSInfoSeq_uniq_>;
#endif

const char * MAVLink::GPSInfoTypeSupportInterface::_local_id = "IDL:MAVLink/GPSInfoTypeSupportInterface:1.0";

MAVLink::GPSInfoTypeSupportInterface_ptr MAVLink::GPSInfoTypeSupportInterface::_duplicate (MAVLink::GPSInfoTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MAVLink::GPSInfoTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, MAVLink::GPSInfoTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MAVLink::GPSInfoTypeSupportInterface_ptr MAVLink::GPSInfoTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (MAVLink::GPSInfoTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < MAVLink::GPSInfoTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MAVLink::GPSInfoTypeSupportInterface_ptr MAVLink::GPSInfoTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoTypeSupportInterface_ptr result;
   result = dynamic_cast < MAVLink::GPSInfoTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * MAVLink::GPSInfoDataWriter::_local_id = "IDL:MAVLink/GPSInfoDataWriter:1.0";

MAVLink::GPSInfoDataWriter_ptr MAVLink::GPSInfoDataWriter::_duplicate (MAVLink::GPSInfoDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MAVLink::GPSInfoDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, MAVLink::GPSInfoDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MAVLink::GPSInfoDataWriter_ptr MAVLink::GPSInfoDataWriter::_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoDataWriter_ptr result = NULL;
   if (p && p->_is_a (MAVLink::GPSInfoDataWriter::_local_id))
   {
      result = dynamic_cast < MAVLink::GPSInfoDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MAVLink::GPSInfoDataWriter_ptr MAVLink::GPSInfoDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoDataWriter_ptr result;
   result = dynamic_cast < MAVLink::GPSInfoDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * MAVLink::GPSInfoDataReader::_local_id = "IDL:MAVLink/GPSInfoDataReader:1.0";

MAVLink::GPSInfoDataReader_ptr MAVLink::GPSInfoDataReader::_duplicate (MAVLink::GPSInfoDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MAVLink::GPSInfoDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, MAVLink::GPSInfoDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MAVLink::GPSInfoDataReader_ptr MAVLink::GPSInfoDataReader::_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoDataReader_ptr result = NULL;
   if (p && p->_is_a (MAVLink::GPSInfoDataReader::_local_id))
   {
      result = dynamic_cast < MAVLink::GPSInfoDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MAVLink::GPSInfoDataReader_ptr MAVLink::GPSInfoDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoDataReader_ptr result;
   result = dynamic_cast < MAVLink::GPSInfoDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * MAVLink::GPSInfoDataReaderView::_local_id = "IDL:MAVLink/GPSInfoDataReaderView:1.0";

MAVLink::GPSInfoDataReaderView_ptr MAVLink::GPSInfoDataReaderView::_duplicate (MAVLink::GPSInfoDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean MAVLink::GPSInfoDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, MAVLink::GPSInfoDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

MAVLink::GPSInfoDataReaderView_ptr MAVLink::GPSInfoDataReaderView::_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoDataReaderView_ptr result = NULL;
   if (p && p->_is_a (MAVLink::GPSInfoDataReaderView::_local_id))
   {
      result = dynamic_cast < MAVLink::GPSInfoDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

MAVLink::GPSInfoDataReaderView_ptr MAVLink::GPSInfoDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   MAVLink::GPSInfoDataReaderView_ptr result;
   result = dynamic_cast < MAVLink::GPSInfoDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



