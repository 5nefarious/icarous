// -*- Mode: Java -*-

Real Lookup altitudeAGL;
Real Lookup totalWP;
Real Lookup currentWP;
Integer Command RunIdleChecks();
Boolean Command ThrottleUp();
Boolean Command CheckKeepInGeofence();
Boolean Command CheckKeepOutGeofence();
Boolean Command CheckTraffic();
Boolean Command CheckFlightPlan(Boolean value);
Boolean Command FlyTrajectory(Boolean value);
Boolean Command FlyManeuver();
Boolean Command ComputeKeepInResolution();
Boolean Command ComputeKeepOutResolution();
Boolean Command ClearConflictData();
Boolean Command ComputeInterceptCourse();

Command SetMode(String mode);
Command ArmMotors(Boolean status);
Command SetNextWPParameters();
Command StartLandingSequence();
Command pprint(...);

ICAROUS:
{           
    FMS:
    Concurrence
    {
	String _state = "IDLE";
	Boolean executeResolution;
	Boolean trajectoryResolution;
	Boolean maneuverResolution;
	Boolean resumeMission;
	Real previousConflicts = 0;
	Integer totalWaypoints;
	
	IDLE:
	{
	    Integer rVal;
	    Start (_state == "IDLE");
	    Repeat true;

	    // Run idle checks - Check for mission start command
	    RUN:
	    {
		EndCondition isKnown(rVal);				
		rVal = RunIdleChecks();
	    }

	    CHECK_TRANSITION:
	    {
		if(rVal == 1){		    
		    _state = "TAKEOFF";		    
		}endif;
	    }	    	   
	}

	TAKEOFF:{
	    Boolean cmdTakeoffSuccess;	    
	    Start ( _state == "TAKEOFF");	    
	    Repeat true;

	    CHANGEMODE1:
	        SetMode("GUIDED");

	    ARM:
	        ArmMotors(true);
	    
	    SPOOL_UP_MOTORS:
	    {
		EndCondition isKnown(cmdTakeoffSuccess);
		cmdTakeoffSuccess = ThrottleUp();
	    }

	    CHECK_TRANSITION:
	    {
		if !cmdTakeoffSuccess
		    _state = "IDLE";
		else
		    _state = "CLIMB";
		endif
	    }	    	    
	}

	CLIMB:{
	    Start (_state == "CLIMB");
	    Repeat true;
	    
	    MONITOR_ASCENT:
	    {
		Real alt = 0;
		EndCondition (abs(Lookup(altitudeAGL) - 5.0) < 2);
		
		// Perform any required activities during ascent - nothing for now
		ACTIONS:{
		    Repeat true;
		    alt = Lookup(altitudeAGL);		   
		}
	    }

	    CHANGEMODE2:
	        SetMode("AUTO");
		
	    // If all above actions were completed,
	    // its time to transition to cruise
	    CHECK_TRANSITION:
		_state = "CRUISE";
	}
	
	CRUISE:
	{
	    // A hash value to identify distinctly the types of conflicts and
	    // distinguish the new set of conflicts from the others.
	    Real currentConflicts;
	    Boolean keepInConflict;
	    Boolean keepOutConflict;
	    Boolean trafficConflict;
	    Boolean flightPlanConflict;
	    Boolean computeResolution = false;

	    Start (_state == "CRUISE");
	    Repeat true;
	    
	    currentConflicts = 0;
	    
	    DETECT_CONFLICTS:
	    {

		CHECK_KEEPIN:
		{
		    EndCondition isKnown(keepInConflict);
		    keepInConflict = CheckKeepInGeofence();
		}
		
		CHECK_KEEPOUT:
		{
		    EndCondition isKnown(keepOutConflict);
		    keepOutConflict = CheckKeepOutGeofence();		    
		}

		CHECK_TRAFFIC:
		{
		    EndCondition isKnown(trafficConflict);
		    trafficConflict = CheckTraffic();
		}

		CHECK_FLIGHTPLAN:
		{
		    EndCondition isKnown(flightPlanConflict);
		    flightPlanConflict = CheckFlightPlan(false);
		}

		if(keepInConflict){
		    currentConflicts = currentConflicts + 0.1231;		 
		}endif

		if(keepOutConflict)
		    currentConflicts = currentConflicts + 1.2346;
		endif

		if(trafficConflict)
		    currentConflicts = currentConflicts + 2.1785;
		endif

		if(flightPlanConflict)
		    currentConflicts = currentConflicts + 3.1234;
		endif

		if(abs(previousConflicts - currentConflicts) > 0.01){
		    previousConflicts = currentConflicts;
		    if(previousConflicts > 0.0)
			computeResolution = true;
		    endif
		}endif				
	    }

	    RESOLVE_CONFLICTS:
	    {
		Boolean newTrajectory = false;
		Boolean completed;
		
		COMPUTE:
		{
		    if(computeResolution){						
			newTrajectory = true;
			if(keepInConflict){
			    Boolean computedSolution;
			    End isKnown(computedSolution);			    
			    computedSolution = ComputeKeepInResolution();
			}elseif(keepOutConflict){
			    Boolean computedSolution;
			    End isKnown(computedSolution);			    
			    computedSolution = ComputeKeepOutResolution();
			}endif

			executeResolution = true;
			trajectoryResolution = true;
			resumeMission = false;
		    }endif
		}

		EXECUTE:
		{
		    if(executeResolution)
		    {
			TRAJECTORY:
			{
			    StartCondition trajectoryResolution;
			    EndCondition isKnown(completed);
			    completed = FlyTrajectory(newTrajectory);
			}
			newTrajectory = false;
		    }elseif(maneuverResolution)
		    {
			MANEUVER:
			{
			    StartCondition maneuverResolution;
			    EndCondition isKnown(completed);
			    completed = FlyManeuver();
			}		    
		    }endif

		    if(completed)
		    {			
			executeResolution = false;
			resumeMission = true;
			newTrajectory = true;
			CLEAR_PREV_CONFLICTS:
			{
			    Boolean cleared;
			    End isKnown(cleared);
			    cleared = ClearConflictData();
			}

			COMPUTE_INTERCEPT_COURSE:
			{
			    Boolean computed;
			    End isKnown(computed);
			    computed = ComputeInterceptCourse();
			}		       			
		    }endif
		}					    	       
	    
		RESUME_MISSION:
		{

		    Boolean missionIntercepted;
		    if(resumeMission)
		    {
			EndCondition isKnown(missionIntercepted);
			missionIntercepted = FlyTrajectory(newTrajectory);		    
		    }endif
		
		    newTrajectory = false;
		    
		    if(missionIntercepted)
		    {
			resumeMission = false;
			SetNextWPParameters();
		    }endif
		
		}
	    }

	    CHECK_TRANSITION:
	    {
		if(Lookup(currentWP) >= Lookup(totalWP))
		    _state = "LAND";
		endif
	    }
	}

	LAND:{
	    Start (_state == "LAND");
	    Repeat true;
	    StartLandingSequence();
	    _state = "IDLE";
	}
    }
}
