/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE RUDDER_RAW PACKING
package com.MAVLink.ruddertest;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* This message encodes all of the raw rudder sensor data from the USV.
*/
public class msg_rudder_raw extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_RUDDER_RAW = 150;
    public static final int MAVLINK_MSG_LENGTH = 5;
    private static final long serialVersionUID = MAVLINK_MSG_ID_RUDDER_RAW;


      
    /**
    * The raw data from the position sensor, generally a potentiometer.
    */
    public int position;
      
    /**
    * Status of the rudder limit sensor, port side. 0 indicates off and 1 indicates that the limit is hit. If this sensor is inactive set to 0xFF.
    */
    public short port_limit;
      
    /**
    * Status of the rudder limit sensor, port side. 0 indicates off and 1 indicates that the limit is hit. If this sensor is inactive set to 0xFF.
    */
    public short center_limit;
      
    /**
    * Status of the rudder limit sensor, starboard side. 0 indicates off and 1 indicates that the limit is hit. If this sensor is inactive set to 0xFF.
    */
    public short starboard_limit;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_RUDDER_RAW;
              
        packet.payload.putUnsignedShort(position);
              
        packet.payload.putUnsignedByte(port_limit);
              
        packet.payload.putUnsignedByte(center_limit);
              
        packet.payload.putUnsignedByte(starboard_limit);
        
        return packet;
    }

    /**
    * Decode a rudder_raw message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.position = payload.getUnsignedShort();
              
        this.port_limit = payload.getUnsignedByte();
              
        this.center_limit = payload.getUnsignedByte();
              
        this.starboard_limit = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_rudder_raw(){
        msgid = MAVLINK_MSG_ID_RUDDER_RAW;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_rudder_raw(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_RUDDER_RAW;
        unpack(mavLinkPacket.payload);        
    }

            
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_RUDDER_RAW -"+" position:"+position+" port_limit:"+port_limit+" center_limit:"+center_limit+" starboard_limit:"+starboard_limit+"";
    }
}
        